//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Runner.Base.Lock.Proxy
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Runner.Base.Lock.Proxy.IDTCMutexService")]
    public interface IDTCMutexService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDTCMutexService/Acquire", ReplyAction="http://tempuri.org/IDTCMutexService/AcquireResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        bool Acquire(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDTCMutexService/AcquireEx", ReplyAction="http://tempuri.org/IDTCMutexService/AcquireExResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        bool AcquireEx(string key, System.TimeSpan mutexTimeout, System.TimeSpan acquireTimeout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDTCMutexService/Release", ReplyAction="http://tempuri.org/IDTCMutexService/ReleaseResponse")]
        void Release(string key);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDTCMutexServiceChannel : Runner.Base.Lock.Proxy.IDTCMutexService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DTCMutexServiceClient : System.ServiceModel.ClientBase<Runner.Base.Lock.Proxy.IDTCMutexService>, Runner.Base.Lock.Proxy.IDTCMutexService
    {
        
        public DTCMutexServiceClient()
        {
        }
        
        public DTCMutexServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public DTCMutexServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public DTCMutexServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public DTCMutexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool Acquire(string key)
        {
            return base.Channel.Acquire(key);
        }
        
        public bool AcquireEx(string key, System.TimeSpan mutexTimeout, System.TimeSpan acquireTimeout)
        {
            return base.Channel.AcquireEx(key, mutexTimeout, acquireTimeout);
        }
        
        public void Release(string key)
        {
            base.Channel.Release(key);
        }
    }
}
